#루프(loops)
루프는 지정된 조건이 정지 조건에 도달할 때 까지 일련의 명령을 반복하는 프로그래밍 도구다.
조건이 충족되면 루프가 중지되고 컴퓨터는 프로그램의 다음 부분으로 이동한다.


#for 루프
일반적인 for루프에는 일반적으로 세 가지 표현식 모두에 나타나는 반복자 변수 가 포함된다
반복자 변수는 초기화되고 중지 조건에 대해 검사되며 각 루프 반복에서 새 값이 할당된다. 
반복자 변수는 어떤 이름도 가질 수 있지만 설명적인 변수 이름을 사용하는 것이 가장 좋다.
for 루프에는 괄호 안에 세미콜론(;)으로 구분된 세 개의 표현식이 포함 된다 .

#배열을 통한 루핑
const vacationSpots = ['Bali', 'Paris', 'Tulum'];

for (let i = 0; i < vacationSpots.length; i++) {
  console.log("I would love to visit " + vacationSpots[i]);
}


#중첩루프
다른 루프 내에서 루프가 실행되고 있을 때 이를 중첩 루프 라고 한다. 
for중첩 루프 의 한 가지 용도 는 두 배열의 요소를 비교하는 것이다. 
외부 루프의 각 라운드에 대해 for내부 for루프가 완전히 실행된다.

const bobsFollowers = ['ben', 'amy', 'bill', 'gill'];
const tinasFollowers = ['ben', 'amy', 'ray'];
let mutualFollowers =[];

for (let i = 0; i < bobsFollowers.length; i++) {
  for (let j = 0; j < tinasFollowers.length; j++) {
    if(bobsFollowers[i] === tinasFollowers[j]) {
      mutualFollowers.push(bobsFollowers[i]);
    }
  }
}


#while 루프
for말고 다른 형태인 while로도 루프를 만들 수 있다.

const cards = ["diamond", "spade", "heart", "club"];

let currentCard;

while (currentCard != 'spade') {
  currentCard = cards[Math.floor(Math.random() * 4)];
  console.log(currentCard);
}


#do while문
while과 다른 점은 while문은 조건이 true로 평가되면 실행되고 false로 평가되면 루프를 중지하지만
do while는 루프를 먼저 실행하고 조건을 평가하기때문에 조건이 false이더라도 적어도 한번은 실행한다

let cupsOfSugarNeeded = 3;
let cupsAdded = 0;
do  {
  cupsAdded++
  console.log(cupsAdded + ' cup was added')
} while (cupsAdded > cupsOfSugarNeeded);
// output : 1 cup was added



#break 키워드
코드에서 루프에 대해 작성한 원래 중지 조건이 충족되지 않은 경우에도 루프가 계속 실행되는 것을 중지하려면 키워드를 사용할 수 있다 .
const rapperArray = ["Lil' Kim", "Jay-Z", "Notorious B.I.G.", "Tupac"];

for ( let i = 0; i < rapperArray.length; i++) {
  console.log(rapperArray[i]);
  if(rapperArray[i] === "Notorious B.I.G.") {
    break;
  }
}
console.log("And if you don't know, now you know.")

/* 
Output:
Lil' Kim
Jay-Z
Notorious B.I.G.
And if you don't know, now you know.
*/

#정리
- 루프는 반복적인 작업을 수행하므로 매번 수동으로 처리하는 코드를 작성할 필요가 없습니다.
- for증가 또는 감소하는 반복자 변수로 루프 를 작성하는 방법
- for루프를 사용하여 배열을 반복하는 방법
- 중첩 for루프는 다른 루프 내부의 루프입니다.
- while루프는 다양한 유형의 정지 조건을 허용합니다.
- 무한 루프를 피하려면 정지 조건이 중요합니다.
- do...while루프는 코드를 한 번 이상 실행합니다. 첫 번째 실행 후 중지 조건만 확인합니다.
- 이 break키워드는 프로그램이 블록을 실행하는 동안 루프를 떠날 수 있도록 합니다.


























